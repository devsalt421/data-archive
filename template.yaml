Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2a
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet1
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2b
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PublicSubnet2
    DependsOn:
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PublicSubnet2/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2a
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: DeployLguStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-2b
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: DeployLguStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/PrivateSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DeployLguStack/Vpc
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/VPCGW
  VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - Vpc8378EB38
          - DefaultSecurityGroup
      Account: "523221107702"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: DeployLguStack/Vpc/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - arn:aws:ec2:ap-northeast-2:523221107702:security-group/
                        - Fn::GetAtt:
                            - Vpc8378EB38
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: DeployLguStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-523221107702-ap-northeast-2
        S3Key: 7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs22.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: DeployLguStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.7fa1e366ee8a9ded01fc355f704cff92bfd179574e6f9cfee800a3541df1b200
      aws:asset:property: Code
  ClusterEB0386A7:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: DeployLguStack/Cluster/Resource
  ClusterDefaultServiceDiscoveryNamespaceC336F9B4:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: internal
      Vpc:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/Cluster/DefaultServiceDiscoveryNamespace/Resource
  AppLogsC5DF83A6:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: DeployLguStack/AppLogs/Resource
  BackendServiceLB09608E98:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - BackendServiceLBSecurityGroup2B9BA648
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/Resource
  BackendServiceLBSecurityGroup2B9BA648:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB DeployLguStackBackendServiceLB2D40A571
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/SecurityGroup/Resource
  BackendServiceLBSecurityGrouptoDeployLguStackBackendServiceSecurityGroup10F42EB58000340AFC61:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - BackendServiceSecurityGroup7599F85E
          - GroupId
      FromPort: 8000
      GroupId:
        Fn::GetAtt:
          - BackendServiceLBSecurityGroup2B9BA648
          - GroupId
      IpProtocol: tcp
      ToPort: 8000
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/SecurityGroup/to DeployLguStackBackendServiceSecurityGroup10F42EB5:8000
  BackendServiceLBPublicListener2FA7FC98:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:ap-northeast-2:523221107702:certificate/38b29412-e4d2-4e1f-a9a2-e7cd0a90ee01
      DefaultActions:
        - TargetGroupArn:
            Ref: BackendServiceLBPublicListenerECSGroupD43CD2AB
          Type: forward
      LoadBalancerArn:
        Ref: BackendServiceLB09608E98
      Port: 443
      Protocol: HTTPS
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/PublicListener/Resource
  BackendServiceLBPublicListenerECSGroupD43CD2AB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/PublicListener/ECSGroup/Resource
  BackendServiceLBPublicRedirectListenerA2A7EC53:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn:
        Ref: BackendServiceLB09608E98
      Port: 80
      Protocol: HTTP
    DependsOn:
      - BackendServiceLBPublicListenerECSGroupD43CD2AB
      - BackendServiceLBPublicListener2FA7FC98
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/LB/PublicRedirectListener/Resource
  BackendServiceTaskDefTaskRoleD63B95BB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/TaskDef/TaskRole/Resource
  BackendServiceTaskDef9F97F56B:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: APP_NAME
              Value: LGUPlus Agent
            - Name: API_PREFIX
              Value: /api/v1
            - Name: AWS_ACCESS_KEY_ID
              Value: ASIAXTUTIQP3CHWYGXQJ
            - Name: AWS_SECRET_ACCESS_KEY
              Value: BqniVo7dy0oAkKMD7S9Yh4k73O8LSJzUyvFmYUyB
            - Name: PRODUCTION
              Value: "True"
            - Name: FORCE_DEPLOY
              Value: "2025-06-25 11:14:58.573736"
          Essential: true
          Image: 195275676720.dkr.ecr.ap-northeast-2.amazonaws.com/lgu-backend:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: AppLogsC5DF83A6
              awslogs-stream-prefix: backend
              awslogs-region: ap-northeast-2
          Name: web
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - BackendServiceTaskDefExecutionRole15BE46B5
          - Arn
      Family: DeployLguStackBackendServiceTaskDef0F452AE2
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - BackendServiceTaskDefTaskRoleD63B95BB
          - Arn
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/TaskDef/Resource
  BackendServiceTaskDefExecutionRole15BE46B5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/TaskDef/ExecutionRole/Resource
  BackendServiceTaskDefExecutionRoleDefaultPolicyDFB9BC56:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - AppLogsC5DF83A6
                - Arn
        Version: "2012-10-17"
      PolicyName: BackendServiceTaskDefExecutionRoleDefaultPolicyDFB9BC56
      Roles:
        - Ref: BackendServiceTaskDefExecutionRole15BE46B5
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  BackendService2147DAF9:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8000
          TargetGroupArn:
            Ref: BackendServiceLBPublicListenerECSGroupD43CD2AB
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - BackendServiceSecurityGroup7599F85E
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      ServiceRegistries:
        - RegistryArn:
            Fn::GetAtt:
              - BackendServiceCloudmapServiceA33CF166
              - Arn
      TaskDefinition:
        Ref: BackendServiceTaskDef9F97F56B
    DependsOn:
      - BackendServiceLBPublicListenerECSGroupD43CD2AB
      - BackendServiceLBPublicListener2FA7FC98
      - BackendServiceTaskDefTaskRoleD63B95BB
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/Service/Service
  BackendServiceCloudmapServiceA33CF166:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        NamespaceId:
          Fn::GetAtt:
            - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
            - Id
        RoutingPolicy: MULTIVALUE
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: backend
      NamespaceId:
        Fn::GetAtt:
          - ClusterDefaultServiceDiscoveryNamespaceC336F9B4
          - Id
    DependsOn:
      - BackendServiceTaskDefTaskRoleD63B95BB
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/Service/CloudmapService/Resource
  BackendServiceSecurityGroup7599F85E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DeployLguStack/BackendService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
      - BackendServiceTaskDefTaskRoleD63B95BB
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/Service/SecurityGroup/Resource
  BackendServiceSecurityGroupfromDeployLguStackBackendServiceLBSecurityGroupF40CD6ED8000425B47FD:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Load balancer to target
      FromPort: 8000
      GroupId:
        Fn::GetAtt:
          - BackendServiceSecurityGroup7599F85E
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - BackendServiceLBSecurityGroup2B9BA648
          - GroupId
      ToPort: 8000
    DependsOn:
      - BackendServiceTaskDefTaskRoleD63B95BB
    Metadata:
      aws:cdk:path: DeployLguStack/BackendService/Service/SecurityGroup/from DeployLguStackBackendServiceLBSecurityGroupF40CD6ED:8000
  BackendBedrockPolicy59B4D277:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - bedrock:GetAgent
              - bedrock:InvokeAgent
              - bedrock:ListAgentAliases
              - bedrock:PrepareAgent
            Effect: Allow
            Resource:
              - arn:aws:bedrock:ap-northeast-2:523221107702:agent-alias/X1LCY26SCO/*
              - arn:aws:bedrock:ap-northeast-2:523221107702:agent/X1LCY26SCO
        Version: "2012-10-17"
      PolicyName: BackendBedrockPolicy59B4D277
      Roles:
        - Ref: BackendServiceTaskDefTaskRoleD63B95BB
    Metadata:
      aws:cdk:path: DeployLguStack/BackendBedrockPolicy/Resource
  FrontendServiceLBC4FCC036:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - FrontendServiceLBSecurityGroup83DC324B
            - GroupId
      Subnets:
        - Ref: VpcPublicSubnet1Subnet5C2D37C4
        - Ref: VpcPublicSubnet2Subnet691E08A3
      Type: application
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/Resource
  FrontendServiceLBSecurityGroup83DC324B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB DeployLguStackFrontendServiceLBE4FFD340
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/SecurityGroup/Resource
  FrontendServiceLBSecurityGrouptoDeployLguStackFrontendServiceSecurityGroupB0A6930130002D422974:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - FrontendServiceSecurityGroupFD135B1B
          - GroupId
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - FrontendServiceLBSecurityGroup83DC324B
          - GroupId
      IpProtocol: tcp
      ToPort: 3000
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/SecurityGroup/to DeployLguStackFrontendServiceSecurityGroupB0A69301:3000
  FrontendServiceLBPublicListener50DF6FDC:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: arn:aws:acm:ap-northeast-2:523221107702:certificate/38b29412-e4d2-4e1f-a9a2-e7cd0a90ee01
      DefaultActions:
        - TargetGroupArn:
            Ref: FrontendServiceLBPublicListenerECSGroup56B2E0A8
          Type: forward
      LoadBalancerArn:
        Ref: FrontendServiceLBC4FCC036
      Port: 443
      Protocol: HTTPS
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/PublicListener/Resource
  FrontendServiceLBPublicListenerECSGroup56B2E0A8:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/PublicListener/ECSGroup/Resource
  FrontendServiceLBPublicRedirectListenerDCD12F34:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn:
        Ref: FrontendServiceLBC4FCC036
      Port: 80
      Protocol: HTTP
    DependsOn:
      - FrontendServiceLBPublicListenerECSGroup56B2E0A8
      - FrontendServiceLBPublicListener50DF6FDC
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/LB/PublicRedirectListener/Resource
  FrontendServiceTaskDefTaskRoleA8543F35:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/TaskDef/TaskRole/Resource
  FrontendServiceTaskDefEAA44C4A:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: NEXT_PUBLIC_API_URL
              Value: https://lguplustestapi.sapie.ai
          Essential: true
          Image: 195275676720.dkr.ecr.ap-northeast-2.amazonaws.com/lgu-frontend:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: AppLogsC5DF83A6
              awslogs-stream-prefix: frontend
              awslogs-region: ap-northeast-2
          Name: web
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
      Cpu: "512"
      ExecutionRoleArn:
        Fn::GetAtt:
          - FrontendServiceTaskDefExecutionRole65651D55
          - Arn
      Family: DeployLguStackFrontendServiceTaskDef9E625F24
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - FrontendServiceTaskDefTaskRoleA8543F35
          - Arn
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/TaskDef/Resource
  FrontendServiceTaskDefExecutionRole65651D55:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/TaskDef/ExecutionRole/Resource
  FrontendServiceTaskDefExecutionRoleDefaultPolicyBD97DD25:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - AppLogsC5DF83A6
                - Arn
        Version: "2012-10-17"
      PolicyName: FrontendServiceTaskDefExecutionRoleDefaultPolicyBD97DD25
      Roles:
        - Ref: FrontendServiceTaskDefExecutionRole65651D55
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  FrontendService31F14A33:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ClusterEB0386A7
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 3000
          TargetGroupArn:
            Ref: FrontendServiceLBPublicListenerECSGroup56B2E0A8
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - FrontendServiceSecurityGroupFD135B1B
                - GroupId
          Subnets:
            - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
      TaskDefinition:
        Ref: FrontendServiceTaskDefEAA44C4A
    DependsOn:
      - FrontendServiceLBPublicListenerECSGroup56B2E0A8
      - FrontendServiceLBPublicListener50DF6FDC
      - FrontendServiceTaskDefTaskRoleA8543F35
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/Service/Service
  FrontendServiceSecurityGroupFD135B1B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DeployLguStack/FrontendService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
      - FrontendServiceTaskDefTaskRoleA8543F35
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/Service/SecurityGroup/Resource
  FrontendServiceSecurityGroupfromDeployLguStackFrontendServiceLBSecurityGroupAAD5828530006A9D3A59:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Load balancer to target
      FromPort: 3000
      GroupId:
        Fn::GetAtt:
          - FrontendServiceSecurityGroupFD135B1B
          - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
          - FrontendServiceLBSecurityGroup83DC324B
          - GroupId
      ToPort: 3000
    DependsOn:
      - FrontendServiceTaskDefTaskRoleA8543F35
    Metadata:
      aws:cdk:path: DeployLguStack/FrontendService/Service/SecurityGroup/from DeployLguStackFrontendServiceLBSecurityGroupAAD58285:3000
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/+1XTW/bOBD9LdWxYNQmBXrITVG6XQNpYthGD2sYxZgcy2woUuWHUlfwf1/ww5YSJ120aQGj2IMhajjz5vFxOKLP8rPXr/PTF3BnTii7PRF8mXdTC/SWTNAopynOs5cZGfwWBO7Mpw7pWd59bOi8y2r4Wnwz2Xn2MtsuSLmSH8clGbul4HTqlhLtvMugBS5gyQW3m3+UxOBNsrahI5bGlDN9IRS9Te81NBFk1NzIK3CSrrNzqx2SjDft2/KBOxjDKzlq2rcFYxqNuZGlRrBcyUiNHAmLQISxa7DvweIdbLJzr/HiaAgeB4snZQolFgvLjybKWZzBUmBv722FMYryALx39oN3o7F/9OhkrHkLFn95xa5AmCPYi+fROB4mR0IjVuFIWtQS9zUUe196K6wFuq5RWjJF6jS3m/dauWbeebIpFUNDNW/20CQDIdRdIcSNs0vlJEtM03EYycoTmjiB2fm8yyjIkRRcYrTEE0eVlEg9pkmgTvIvDpNAYT+9OQAvfjvyuyGwn01OHjL47OR4lMkgoEf9X8DnCBg76LAmDwwx5YE5IW8JUpN3pXDGop4fELjEFThhS6Ec+wDNNdRoGqBRFwk1pstCZJJgyF+gK/B929xe4opL7mV6eP146heQ7oeSUkkLXKIe2FKSKeqW95ebpEiwbYmJA8YNVS3qTd6lj8OlNPu1DFdCegEC0iPuZJcxhiU5QuwAhkkzQao0m20abyt8N3PGqvpvBGHX5Rp9l+qyFXDhNM7WGs1aiV31eICZFQMq+0UJVZm8u1JVbEK7Re8MYUs/NWB9RzN50TSC09DyrhSwCxAgKbL76hEUYCynQgFbBg8uq/Ys7x6P1k/tZSLSO5IhADcW5dPB3y2IXfAQcAa6Qrsv+8HrlnCo826ihN8mMMbVyC42Xu9Gc0l5A6KgVDlp+y+Fq9EHFLT/PIRTELp/bABjJTi9d837aWiSaSXwen+E4nmbqfEOZJ+r2y7+m8d3Jxn7ABIqZD1mVg8thZa7g/ysRf2ZkizihVMgiVOxEacEM+VnDvIemhmbWrDorxGmX4IZ2Po1P+b5I+l+FcHYA8Oit1tShv41/DsZlUmGB/NjrVrOUF+AQVIYg3ZqoeKy8jE3zjbObsl4Y9dKvnqTn57mpy8+G85PtJOW15hP4vNfYn5Kk9kOAAA=
    Metadata:
      aws:cdk:path: DeployLguStack/CDKMetadata/Default
Outputs:
  BackendServiceLoadBalancerDNSE742582D:
    Value:
      Fn::GetAtt:
        - BackendServiceLB09608E98
        - DNSName
  BackendServiceServiceURLB1770053:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - BackendServiceLB09608E98
              - DNSName
  FrontendServiceLoadBalancerDNSAA892DED:
    Value:
      Fn::GetAtt:
        - FrontendServiceLBC4FCC036
        - DNSName
  FrontendServiceServiceURL94B0BA88:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Fn::GetAtt:
              - FrontendServiceLBC4FCC036
              - DNSName
  FrontendURL:
    Value: https://lguplustest.sapie.ai
  BackendURL:
    Value: https://lguplustestapi.sapie.ai
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

